from typing import Dict, List
import logging
from attacks.injection.sql_injection import SQLInjectionScanner
from attacks.xss.xss_scanner import XSSScanner
from attacks.injection.xxe_injection import XXEInjectionScanner
from attacks.authentication.session_hijacking import SessionHijackingScanner
from attacks.advanced.ssrf import SSRFScanner
from attacks.advanced.api_scanner import APISecurityScanner
from attacks.owasp.owasp_scanner import OWASPScanner

class VulnerabilityDetector:
    def __init__(self, target_url: str, config: Dict):
        self.target_url = target_url
        self.config = config
        self.scanners = {}
        self.initialize_scanners()

    def initialize_scanners(self):
        scanner_mapping = {
            'sql_injection': SQLInjectionScanner,
            'xss': XSSScanner,
            'xxe_injection': XXEInjectionScanner,
            'session_hijacking': SessionHijackingScanner,
            'ssrf': SSRFScanner,
            'api_security': APISecurityScanner,
            'owasp': OWASPScanner
        }

        for scanner_type, scanner_class in scanner_mapping.items():
            self.scanners[scanner_type] = scanner_class(self.target_url, self.config)

    def detect_vulnerabilities(self, selected_scanners: List[str] = None) -> Dict:
        if not selected_scanners:
            selected_scanners = list(self.scanners.keys())

        results = {}
        for scanner_type in selected_scanners:
            if scanner_type in self.scanners:
                try:
                    logging.info(f"Starting {scanner_type} scan...")
                    scan_results = self.scanners[scanner_type].scan()
                    results.update(scan_results)
                    logging.info(f"Completed {scanner_type} scan")
                except Exception as e:
                    logging.error(f"Error in {scanner_type} scanner: {e}")
                    results[scanner_type] = {"error": str(e)}

        return self.analyze_results(results)

    def analyze_results(self, results: Dict) -> Dict:
        analyzed_results = {
            'vulnerabilities': results,
            'summary': {
                'high': 0,
                'medium': 0,
                'low': 0,
                'total': 0
            }
        }

        # Count vulnerabilities by severity
        for vuln_type, findings in results.items():
            if isinstance(findings, list):
                for finding in findings:
                    if 'severity' in finding:
                        severity = finding['severity'].lower()
                        analyzed_results['summary'][severity] += 1
                        analyzed_results['summary']['total'] += 1

        return analyzed_results
